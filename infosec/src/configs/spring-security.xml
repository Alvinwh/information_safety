<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 学习spring security，实现具有角色的访问控制，并在这里实现配置 -->

	<!--登录页面不过滤 -->  
	    <http pattern="/login.jsp" security="none"/>  
	    <http pattern="/index.jsp" security="none"/>
	    <http access-denied-page="/accessDenied.jsp">  
	        <form-login 
	        login-page="/login.jsp" 
	         username-parameter="username"
             password-parameter="password"
             authentication-failure-url="/login.jsp?error"/>  
	        <!--访问/admin.jsp资源的用户必须具有ROLE_ADMIN的权限 -->  
	        <intercept-url pattern="/users*" access="ROLE_ADMIN" />  
	        <!--访问/**资源的用户必须具有ROLE_USER的权限 -->  
	        <intercept-url pattern="/user_detail.jsp" access="ROLE_USER,ROLE_ADMIN" />  
	        <intercept-url pattern="/user/*" access="ROLE_USER,ROLE_ADMIN" />  
	        <session-management>  
	            <concurrency-control max-sessions="1"  
	                error-if-maximum-exceeded="false" />  
	        </session-management>  
	        
	        <logout invalidate-session="true" logout-url="/login.jsp?logout"	logout-success-url="/login.jsp?logout_success" />
	        <!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->  
	       <!--  <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />   -->
	    </http>  
	   
	<!-- 	 <authentication-manager alias="authenticationManager">  
	        <authentication-provider user-service-ref="myUserDetailService">  
	            如果用户的密码采用加密的话 <password-encoder hash="md5" />  
	            <password-encoder hash="md5" />  
	        </authentication-provider>  
	    </authentication-manager>   -->
	    
	    
	    
	     
		<authentication-manager alias="authenticationManager"> 
		    <authentication-provider
		        ref="authenticationProvider" > 
		    </authentication-provider> 
		</authentication-manager> 
		 
		<beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> 
		    <beans:property name="userDetailsService" ref="myUserDetailService" /> 
		    <beans:property name="hideUserNotFoundExceptions" value="false" /> 
		</beans:bean>
	    
	    
	    
	    <beans:bean id="encoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>  
	    
	    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
	    <beans:bean id="myUserDetailService" class="infosec.security.MyUserDetailService" />  
	    <!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
	    <!-- <beans:bean id="myAccessDecisionManagerBean"  
	        class="com.erdangjiade.spring.security.MyAccessDecisionManager">  
	    </beans:bean>   -->
    
</beans:beans>